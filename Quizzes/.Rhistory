setwd("C:/Users/Mike/Rspace/JHU_PML/Quizzes")
rm(list=ls())
# load the concrete data
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
str(concrete)
# 1-fold cross-validation
K <- 1
prednames <- names(concrete)[-9]
Form <- formula(paste("CompressiveStrength~", paste(prednames,collapse="+"), sep=""))
rss <- matrix(0, nr=K, nc=3)
colnames(rss) <- c("lm","lasso","lasso2")
getrss <- function(y, yhat) mean((y-yhat)^2)
set.seed(3523)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
#Set the seed to 233 and fit a lasso model to predict Compressive Strength
library(lasso2)
set.seed(233)
set.seed(233)
library(elasticnet)
fit <- train(Form,method="lasso",data=training)
yhatlasso2 <- predict(fit, newdata=testing)
rss[1,3] <- getrss(testing$CompressiveStrength, yhatlasso2)
rss
summary(fit$finalModel)
plot(fit$finalModel)
set.seed(233)
library(elasticnet)
fit <- train(Form,method="lasso",data=training)
yhatlasso2 <- predict(fit, newdata=testing)
rss[1,3] <- getrss(testing$CompressiveStrength, yhatlasso2)
rss
summary(fit$finalModel)
plot(fit$finalModel)
fit$finalModel
str(fit)
library(lasso2)
set.seed(233)
fitl1 <- l1ce(Form, data=training, bound=seq(0.01,1,0.01))
gcvres <- gcv(fitl1)
best.bound <- gcvres[which.min(gcvres[,"gcv"]), "rel.bound"]
fitl1
library(lasso2)
set.seed(233)
fitl1 <- l1ce(Form, data=training, bound=seq(0.01,1,0.01))
gcvres <- gcv(fitl1)
best.bound <- gcvres[which.min(gcvres[,"gcv"]), "rel.bound"]
fitl1
# now try lasso using caret for comparison
set.seed(233)
library(elasticnet)
fit <- train(Form,method="lasso",data=training)
yhatlasso2 <- predict(fit, newdata=testing)
rss[1,3] <- getrss(testing$CompressiveStrength, yhatlasso2)
rss
summary(fit$finalModel)
plot(fit$finalModel,color=)
set.seed(233)
library(elasticnet)
fit <- train(Form,method="lasso",data=training)
yhatlasso2 <- predict(fit, newdata=testing)
rss[1,3] <- getrss(testing$CompressiveStrength, yhatlasso2)
rss
summary(fit$finalModel)
plot(fit$finalModel)
fit$finalModel
plot(fit$finalModel)
fitl1 <- l1ce(Form, data=training, bound=best.bound)
yhatlasso <- predict(fitl1, newdata=testing)
rss[1,2] <- getrss(testing$CompressiveStrength, yhatlasso)
fitl1$finalModel
library(lasso2)
set.seed(233)
fitl1 <- l1ce(Form, data=training, bound=seq(0.01,1,0.01))
gcvres <- gcv(fitl1)
best.bound <- gcvres[which.min(gcvres[,"gcv"]), "rel.bound"]
fitl1
set.seed(233)
library(elasticnet)
fit <- train(Form,method="lasso",data=training)
yhatlasso2 <- predict(fit, newdata=testing)
rss[1,3] <- getrss(testing$CompressiveStrength, yhatlasso2)
rss
fit$finalModel
plot(fit$finalModel)
?glmnet
# download data if not yet already done so
if(!file.exists("./data/gaData.csv")){
fileURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(fileURL,destfile="./data/gaData.csv")
}
library(lubridate)  # For year() function below
dat = read.csv("./data/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
# download data if not yet already done so
if(!file.exists("./data/gaData.csv")){
fileURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(fileURL,destfile="./data/gaData.csv")
}
library(lubridate)  # For year() function below
dat = read.csv("./data/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
# download data if not yet already done so
if(!file.exists("./data/gaData.csv")){
fileURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(fileURL,destfile="./data/gaData.csv")
}
library(lubridate)  # For year() function below
dat = read.csv("./data/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
str(training)
str(training)
str(testing)
tstrain
str(dat)
plot(tstrain)
?ts
?bats
bats(training)
bats(tstrain)
fit<-bats(tstrain)
plot(forecast(fit))
?forecast
library(forecast)
fit<-bats(tstrain)
fcast <- forecast(fit)
plot(fcast); lines(tsTest,col="red")
plot(fcast); lines(tstest,col="red")
tstest = ts(testing$visitsTumblr)
rm(list=ls())
# download data if not yet already done so
if(!file.exists("./data/gaData.csv")){
fileURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(fileURL,destfile="./data/gaData.csv")
}
library(lubridate)  # For year() function below
dat = read.csv("./data/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr) # create time series from training tumblr visits
tstest = ts(testing$visitsTumblr)
str(training)
str(testing)
# Fit a model using the bats() function in the forecast package to the training
# time series.
library(forecast)
fit<-bats(tstrain)
fcast <- forecast(fit)
plot(fcast); lines(tstest,col="red")
accuracy(fcast,tstest)
summaary(tstest)
summary(tstest)
summary(tstrain)
fcast
?forecast
fit
rm(list=ls())
# download data if not yet already done so
if(!file.exists("./data/gaData.csv")){
fileURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(fileURL,destfile="./data/gaData.csv")
}
library(lubridate)  # For year() function below
dat = read.csv("./data/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr) # create time series from training tumblr visits
tstest = ts(testing$visitsTumblr)
str(training)
str(testing)
# Fit a model using the bats() function in the forecast package to the training
# time series.
library(forecast,h=nrow(tstest))
fit<-bats(tstrain)
fcast <- forecast(fit)
plot(fcast); lines(tstest,col="red")
accuracy(fcast,tstest)
fit
fit
library(forecast)
fit<-bats(tstrain)
fcast <- forecast(fit,h=nrow(tstest))
plot(fcast); lines(tstest,col="red")
accuracy(fcast,tstest)
nrow(tstest)
length(tstest)
library(forecast)
fit<-bats(tstrain)
fcast <- forecast(fit,h=length(tstest))
plot(fcast); lines(tstest,col="red")
accuracy(fcast,tstest)
str(tstest)
head(tstest)
str(testing)
summary(testing)
accuracy(fcast,testing$visitsTumblr)
fcast
class(fcast)
fcast[1]
str(fcast)
fcast[2]
df<-data.frame(fcast[2],testing$visitsTumblr)
head(df)
fcast
fcast[5]
fcast[4]
fcast[6]
df<-data.frame(fcast[2],fcast[6],fcast[5],testing$visitsTumblr)
str(df)
head(fcast)
fcast
head(df)
df$lower.1<-NULL
df$upper.1<-NULL
df<-data.frame(fcast[2],fcast[6],fcast[5],testing$visitsTumblr)
df$lower.1<-NULL
df$upper.1<-NULL
head(df)
nrow(subset(df,testing.visitsTumblr>=lower.2 & testing.visitsTumblr<=upper.2))
nrow(subset(df,testing.visitsTumblr>=lower.2 & testing.visitsTumblr<=upper.2))/nrow(df)
nrow(subset(df,testing.visitsTumblr>=lower.2 & testing.visitsTumblr<=upper.2))/nrow(df)
nrow(subset(df,testing.visitsTumblr>lower.2 & testing.visitsTumblr<upper.2))/nrow(df)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
batman()
?e1071
library(e1071)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings.
# Predict on the testing set. What is the RMSE?
set.seed(325)
fit<-svm(CompressiveStrength~.,data=training)
yhat<-predict(fit,testing)
getrss(testing$CompressiveStrength,yhat)
getrss <- function(y, yhat) mean((y-yhat)^2)
getrss(testing$CompressiveStrength,yhat)
getrmse <- function(y, yhat) sqrt(mean((y-yhat)^2))
getrmse(testing$CompressiveStrength,yhat)
round(getrmse(testing$CompressiveStrength,yhat),2)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings.
# Predict on the testing set. What is the RMSE?
set.seed(325)
fit<-svm(CompressiveStrength~.,data=training)
yhat<-predict(fit,testing)
getrmse <- function(y, yhat) sqrt(mean((y-yhat)^2))
round(getrmse(testing$CompressiveStrength,yhat),2)
rm(list=ls())
#load Alzheimer's data
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Build three different models
set.seed(62433)
mod1 <- train(diagnosis ~.,method="glm",data=training)
set.seed(62433)
mod2 <- train(diagnosis ~.,method="rf",data=training)
set.seed(62433)
mod3 <- train(diagnosis ~.,method="lda",data=training)
#Stack the predictions together using random forests ("rf").
# What is the resulting accuracy on the test set?
# Is it better or worse than each of the individual predictions?
# Predict on the testing set
pred1 <- predict(mod1,testing)
pred2 <- predict(mod2,testing)
pred3 <- predict(mod3,testing)
# Accuracies of each model
ctmod1_test<-table(testing$diagnosis, pred1)
accuracy_mod1<-sum(diag(ctmod1_test))/sum(ctmod1_test)
accuracy_mod1
ctmod2_test<-table(testing$diagnosis, pred2)
accuracy_mod2<-sum(diag(ctmod2_test))/sum(ctmod2_test)
accuracy_mod2
ctmod3_test<-table(testing$diagnosis, pred3)
accuracy_mod3<-sum(diag(ctmod3_test))/sum(ctmod3_test)
accuracy_mod3
# stack the models
dfStack<-(data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis))
#fit a model using rf that combines the predictors
combModFit <- train(diagnosis ~.,method="rf",
data=dfStack)
combPred <- predict(combModFit,dfStack)
# combined accuracy
ct_comb<-table(testing$diagnosis, combPred)
accuracy_comb<-sum(diag(ct_comb))/sum(ct_comb)
accuracy_comb
accuracy_mod1
accuracy_mod2
accuracy_mod3
install.packages(c("BH", "car", "caret", "chron", "dplyr", "e1071", "evaluate", "gdata", "ggmap", "git2r", "gridExtra", "httpuv", "httr", "kernlab", "knitr", "lme4", "manipulate", "NLP", "quantmod", "quantreg", "R6", "rgdal", "rmarkdown", "RMySQL", "rversions", "scales", "shiny", "SparseM", "testthat", "tm", "TTR", "UsingR", "XML"))
install.packages(c("BH", "car", "caret", "chron", "dplyr", "e1071",
