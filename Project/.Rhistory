plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
fit<-lm(gpm~factor(am)*wt,data=mtcars)
str(mtcars)
library(dplyr)
data(mtcars)
str(mtcars)
#make  am a factor column
mtcars$am<-as.factor(mtcars$am)
mtcars$gpm<-100/mtcars$mpg
fit<-lm(gpm~factor(am)*wt,data=mtcars)
summary(fit)
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtcars,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
fit<-lm(gpm~factor(am)*wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt,data=mtcars)
summary(fit)
?mtcars
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(2,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
mtcars$gpm<-100/mtcars$mpg
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(2,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
mtcars$gpm<-100/mtcars$mpg
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(1,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
mtcars$gpm<-100/mtcars$mpg
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(1,2,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
fit<-lm(gpm~disp+hp+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~disp+hp+wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp+qsec+facyor(cyl)+factor(am))
fit<-lm(mpg~wt+disp+hp+qsec+facyor(cyl)+factor(am))
fit<-lm(gpm~wt+disp+hp+qsec+facyor(cyl)+factor(am),data=mtcars)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(am),data=mtcars)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(trans),data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(trans)-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
summary(fit)
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()+gm_smooth(method=lm)
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()+geom_smooth(method=lm)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt+factor(cyl),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+wt-mean(wt),data=mtcars)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt)),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
fit$confint
confint(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))+I(hp-mean(hp))-1,data=mtcars)
summary(fit)
confint(fit)
mean(wt)
mean(mtcars$wt)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
confint(fit)
resid(fit)
plot(resid(fit))
qqplot(resid(fit))
help(resid)
?resid
plot(fit)
par(2,2)
par(mfrow=c(2,2))
plot(m)
plot(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
confint(fit)
plot(fit)
plot(fit)
mfrow=c(2,2)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
plot(fit)
summary(fit)
qqplot
?qqplot
auto<-subset(mtcars(trans=="auto"))
auto<-subset(mtcars[trans=="auto"])
str(mtcars)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars,var=TRUE)
?lm
m<-mtcars[trans=="manual",]
m<-mtcars[mtcars$trans=="manual",]
a<-mtcars[mtcars$trans=="auto",]
qqplot(m$gpm,a$gpm)
qqlm<-lm(m$gpm~a$gpm)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))-1,data=mtcars)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
pairs(mtcars[,-c(1,2,8,9,10,11)])
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))+I(disp-mean(disp))+I(hp-mean(hp)),data=mtcars)
confint(fit)
summary(fit)
?mtcars
pairs(mtcars)
pairs(mtcars[,-c(1,8,9,10,11)])
fit<-lm(gpm~factor(cyl)+factor(trans)+wt+disp+hp+qsec+drat)
fit<-lm(gpm~factor(cyl)+factor(trans)+wt+disp+hp+qsec+drat,data=mtcars)
confint(fit)
summary(fit)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt-1,data=mtcars)
summary(fit)
confint(fit)
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
#make  am a factor column
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
str(mtcars)
pairs(mtcars[,-c(1,2,8,9,10,11,12)])
```{r gpm plot}
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtcars,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
pairs(mtcars[,-c(1,2,8,9,10,11,12)])
pairs(mtcars[,-c(1,2,8,9,10,11)])
?mtcars
fit<-lm(mpg~factor(am)+wt+disp+qsec+hp)
summary(fit)
confint(fit)
fit<-lm(mpg~factor(am)+wt+disp+qsec+hp,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt+disp+qsec+hp,data=mtcars)
summary(fit)
confint(fit)
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
pairs(mtcars[,-c(1,2,8,9,10,11)])
for (i in c(2,5,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
pairs(mtcars[,-c(1,2,8,9,10,11)])
pairs(mtcars[,-c(1,2,5,8,9,10,11)])
fit<-lm(gpm~factor(am)+wt+disp+qsec+hp-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit
confint(fit))
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit
confint(fit)
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
pairs(mtcars, panel=panel.smooth, main="mtcars data")
pairs(mtcars[,-c(1,2,5,8,9,10,11)])
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
plot(fit)
plot(fit)[1,]
str(plot(fit))
class(plot(fit))
plot(fit)
a<-plot(fit)
class(a)
a[[1]]
a[1]
qqplot(fit)
qqplot(mtcars$weight,mtcars$gpm)
?qqplot
qqplot(mtcars$wt,mtcars$gpm)
plot(fit)
qqplot(mtcars$wt,mtcars$gpm)
plot(mtcars$wt,mtcars$gpm)
resid(fit)
plot(resid(fit))
qqplot(fit)
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
plot(fit)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
library(MASS)
?MASS
?shuttle
head(shuttle)
summary(shuttle)
library(MASS)
fit<-glm(use~wind,data=shuttle)
fit
library(MASS)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
fit
library(MASS)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind+magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind+magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03201)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
m <- polr(use ~ wind,data = shuttle, Hess=TRUE)
summary(m)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial,data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
summary(m)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial,data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial(logit),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind*magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03201)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind-1,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
plot(shuttle$auto,shuttle$wind)
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
hist(shuttle$auto,shuttle$wind)
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
table(shuttle$auto,shuttle$wind)
materials<-c("Concrete","Straw bale", "Rammed earth", " Granite")
tc<-c(1.13,0.055,0.6,3.49)
density<-c(2300,120,2000,2880)
cp<-c(840,2000,837,840)
thermal.df<-data.frame(materials,tc,density,cp)
thermal.df
thermal.df$diff=thermal.df$tc/(thermal.df$density*thermal.df$cp)
thermal.df
setwd("H:/Rspace/JHU_Data_Science/JHU_PML/Project")
training<-read.csv("./data/training.csv")
testing<-read.csv("./data/testing.csv")
testdf<-testing[,sapply(testing,is.factor)|sapply(testing,is.integer)
|sapply(testing,is.numeric)]
traindf<-select(training,which(colnames(training) %in% names(testdf)))
traindf$classe<-training$classe
library(dplyr)
testdf<-testing[,sapply(testing,is.factor)|sapply(testing,is.integer)
|sapply(testing,is.numeric)]
traindf<-select(training,which(colnames(training) %in% names(testdf)))
traindf$classe<-training$classe
traindf$new_window<-NULL
testdf$new_window<-NULL
preObj <- preProcess(traindf[,6:58],method=c("center","scale"))
traindf <- data.frame(traindf[,1:5],predict(preObj,traindf[,6:58]))
testdf <- data.frame(testdf[,1:5],predict(preObj,testdf[,6:58]))
traindf$classe<-training$classe
testdf$id<-testing$id
library(caret)
preObj <- preProcess(traindf[,6:58],method=c("center","scale"))
traindf <- data.frame(traindf[,1:5],predict(preObj,traindf[,6:58]))
testdf <- data.frame(testdf[,1:5],predict(preObj,testdf[,6:58]))
traindf$classe<-training$classe
testdf$id<-testing$id
InTrain<-createDataPartition(y=traindf$classe,p=0.7,list=FALSE)
trainingcv<-traindf[InTrain,]
testingcv<-traindf[-InTrain,]
library(randomForest)
set.seed(1)
classeForest = randomForest(classe ~ ., data=trainingcv[,6:ncol(trainingcv)] )
PredictForest = predict(classeForest, newdata = testingcv[,6:ncol(testingcv)])
ctClasserf<-table(testingcv$classe, PredictForest)
ctClasserf
install.packages("randomForest")
library(randomForest)
set.seed(1)
classeForest = randomForest(classe ~ ., data=trainingcv[,6:ncol(trainingcv)] )
PredictForest = predict(classeForest, newdata = testingcv[,6:ncol(testingcv)])
ctClasserf<-table(testingcv$classe, PredictForest)
ctClasserf
library(randomForest)
set.seed(1)
classeForest = randomForest(classe ~ ., data=trainingcv[,6:ncol(trainingcv)] )
PredictForest = predict(classeForest, newdata = testingcv[,6:ncol(testingcv)])
ctClasserf<-table(testingcv$classe, PredictForest)
ctClasserf
sum(diag(ctClasserf))/sum(ctClasserf)
vu = varUsed(classeForest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
#vusorted
dotchart(vusorted$x, names(classeForest$forest$xlevels[vusorted$ix]))
varImpPlot(classeForest)
library(randomForest)
set.seed(1)
classeForest = randomForest(classe ~ num_window+yaw_belt+pitch_belt+roll_belt+magnet_dumbbell_x+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+roll_forearm, data=trainingcv )
PredictForest = predict(classeForest, newdata = testingcv)
ctClasserf<-table(testingcv$classe, PredictForest)
ctClasserf
# accuracy on test set
accuracy<-sum(diag(ctClasserf))/sum(ctClasserf)
accuracy
library(randomForest)
set.seed(1)
classeForest = randomForest(classe ~ yaw_belt+pitch_belt+roll_belt+magnet_dumbbell_x+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+roll_forearm, data=trainingcv )
PredictForest = predict(classeForest, newdata = testingcv)
ctClasserf<-table(testingcv$classe, PredictForest)
ctClasserf
# accuracy on test set
accuracy<-sum(diag(ctClasserf))/sum(ctClasserf)
accuracy
```
This also achieves almost perfect accuracy, and we now have more confidence that it will perform just as well on other out-of-sample data sets, with error rates comparable to what we have observed on our "testing" sub-set of the training data, this being
```{r error rate}
# out-of-sample error rate prediction
1-accuracy
vu = varUsed(classeForest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(classeForest$forest$xlevels[vusorted$ix]))
vImp<-varImp(classeForest,count=TRUE)
varImpPlot(classeForest)
